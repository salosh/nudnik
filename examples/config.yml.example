---
#
#    This file is part of Nudnik. <https://github.com/salosh/nudnik.git>
#
#    Nudnik is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    Nudnik is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Nudnik.  If not, see <http://www.gnu.org/licenses/>.
#

#
# Specify if should run in server mode
#
#server: False

#
# The host:port you wish to use for connection, depends on the operation mode
#
#host: "127.0.0.1"
#port: 5410

#
# The name the client should report when composing messages
#
#name: "NAME"

#
# Fail request on name mismatch, choose from ['prefix', 'suffix', 'exact']
#
#name_mismatch_error:

#
# Number of workers (threads) that should be forked (Default: Count of CPU cores)
#
#workers:

#
# Number of streams that should be created
#
#streams: 1

#
# Calculate stream ID from this initial index (Default: 0)
#
#initial_stream_index: 0

#
# The number of seconds per stream message cycle
#
#interval: 1

#
# The rate of messages-per-second each stream should produce
#
#rate: 1

#
# Count of total messages that should be sent (Default: 0 == unlimited)
#
#count: 0

#
# Compute statistical process level random crashes (Default: 0)
# The highest possible value is (3600 / interval), this means 100% chaos applied
# configuring 1 means a *statistical* failure every hour or so.
#
#chaos: 0

#
# Add fake load to every request
# You may specify as much as you like, and several of the same type, however they will be executed FIFO
# Possible values:
#   "rtt"  - Add a fixed <value> seconds sleeping time before replying (string value, will be cast to float)
#   "rttr" - Add a random (between 0 and <value>) seconds sleeping time before replying (specify value, will be cast to float)
#   "cpu"  - Add a CPU load for <value> amount of seconds (specify string, will be cast to float)
#   "mem"  - Add a MEM load for <value> amount of MB to be loaded to memory (specify string, will be cast to int)
#   "cmd"  - Execute the <value> command, wait for the process to finish (specify string, will be splitted by spaces)
#   "fcmd" - Execute the <value> command in background, do not wait for the process to finish (specify string, will be splitted by spaces)
#
#load:
#- ["rttr", "0.0030"]
#- ["cpu", "1"]
#- ["cmd", "logger hello from nudnik"]

#
# Send this extra string data with every request
# Configuring "meta: @file_name" will cause Nudnik to send the contents of <file_name> with every request.
# Configuring "meta: random" will add an additional 4MB of /dev/urandom data to the request.
#meta: ""

#
# Number of times to re-send failed messages, negative value means infinite retries
#retry_count: -1

#
# Percent of requests to fail intentionally
#
#fail_ratio: 0

#
# Enable "Are You OK?" HTTP/1.1 API (default: False)
# You might want to enable this for k8s 'liveness' support, or AWS ELB '/status' health-checks
#
#ruok: False

#
# "Are You OK?" HTTP/1.1 API port (default: 80)
#
#ruok_port: 80

#
# "Are You OK?" HTTP/1.1 API path (Default: /ruok)
#
#ruok_path: "/ruok"

#
# Enable stats outputs, choose from ['stdout', 'file', 'influxdb', 'prometheus']
#
#stats:

#
# Number of seconds per stats cycle (Default: 1)
#
#stats_interval: 1

#
# Path to exported stats file
#
#file_path: "./nudnikstats.out"

#
# Enables customization of the data that will be written to <file_path>
#
#out_format: "{recieved_at_str},{status_code},{req.name},{req.message_id},{req.ctime},{cdelta}"
#
# Enables customization of the data that will be written to <file_path> on retransmitted messages
#
#out_retransmit_format: "{recieved_at_str},{status_code},{req.name},{req.message_id},{req.ctime},{req.rtime},{cdelta},{rdelta},{req.rcount}"

#
# Absolute path to InfluxDB Unix socket
#
#influxdb_socket_path: "/var/run/influxdb/influxdb.sock"

#
# InfluxDB database name                   
#
#influxdb_database_name: "nudnik"

#
# Enables customization of the data that will be sent to InfluxDB,
# The fields before the first space are used as tags, and the rest as values.
# For further information, please refer to: https://docs.influxdata.com/influxdb/v1.7/write_protocols/line_protocol_tutorial/
#
#influxdb_format: "status={status_code},name={req.name},sid={req.stream_id},wid={req.worker_id},qid={req.sequence_id} sid={req.stream_id},wid={req.worker_id},mid={req.message_id},ctime={req.ctime},cdelta={cdelta},sdelta={sdelta},pdelta={pdelta},bdelta={bdelta},rtt={rtt} {recieved_at}"
#
# Enables customization of the data that will be sent to InfluxDB on retransmitted messages
#
#influxdb_retransmit_format: "status={status_code},name={req.name},sid={req.stream_id},wid={req.worker_id},qid={req.sequence_id} sid={req.stream_id},wid={req.worker_id},mid={req.message_id},ctime={req.ctime},rtime={req.rtime},cdelta={cdelta},sdelta={sdelta},pdelta={pdelta},bdelta={bdelta},rdelta={rdelta},rcount={req.rcount},rtt={rtt} {recieved_at}"

#
# Prometheus pushgateway protocol
#
#prometheus_protocol: "http"

#
# Prometheus pushgateway host:port
#
#prometheus_host: "127.0.0.1:9091"

#
# Enables customization of the data that will be sent to Prometheus,
# For further information, please refer to: https://github.com/prometheus/pushgateway
#
#prometheus_format: "# TYPE nudnik_message summary\nnudnik_message{{ctime="{req.ctime}",message_id="{req.message_id}", rtt="{rtt}", name="{req.name}"}} {recieved_at}\n"
#
# Enables customization of the data that will be sent to Prometheus on retransmitted messages
#
#prometheus_retransmit_format: "# TYPE nudnik_message summary\nnudnik_message{{ctime="{req.ctime}",message_id="{req.message_id}", rtt="{rtt}", name="{req.name}"}} {recieved_at}\n"

#
# Enable debug mode
#
#debug: False

#
# Set verbose mode
#
#verbose:
